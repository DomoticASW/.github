@startuml devices-management-domain-model

hide empty members
package Repository{
    interface Repository<Id, Entity>
}

package "Devices management" {

    interface Device {
        + id: DeviceId
        + name: String
        + address: URL
    }

    enum DeviceStatus {
        Online
        Offline
    }

    interface DeviceGroup {
        + name: String
    }

    enum Type<T> {
        IntType<Int>
        DoubleType<Double>
        BooleanType<Boolean>
        ColorType<Color>
        StringType<String>
        VoidType<Void>
    }

    interface TypeConstraints<T> {
        + validate(value: T): InvalidValueError?
    }

    struct Enum {
        + values: Set<String>
    }

    struct IntRange {
        + min: Int
        + max: Int
    }

    struct DoubleRange {
        + min: Double
        + max: Double
    }

    struct None<T>
    note bottom of None
        None represents a simple
        type without constraints
    end note


    interface DeviceProperty<T> {
        + name: String
        + value: T
    }

    interface DeviceAction<T> {
        + name: String
        + description: String?
        + execute(input: V): Void
    }

    interface DeviceEvent {
        + name: String
    }


    Device -l- DeviceStatus : "status >"
    Device "0..*"  -r-o "0..*" DeviceGroup
    TypeConstraints "0..*" -- "1" Type : "type >"
    Enum -u-|> TypeConstraints : "<String>"
    IntRange -u-|> TypeConstraints : "<Int>"
    DoubleRange -u-|> TypeConstraints : "<Double>"
    None -u-|> TypeConstraints
    DeviceAction "0..*" -- "1" TypeConstraints : "inputTypeConstraint >"
    Device "1" *-- "0..*" DeviceProperty
    Device "1" *-- "0..*" DeviceAction
    <> Diamond
    DeviceProperty -r- Diamond : "or"
    Diamond "0..1" -r- "1" DeviceAction : "setter >"
    note on link 
        DeviceProperty.Device == DeviceAction.Device
    end note
    Diamond "0..*" -- "1" TypeConstraints
    Device "1" -- "0..*" DeviceEvent
}

note top of "Devices management"
    every field is immutable
end note

@enduml
