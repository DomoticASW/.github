@startuml devices-management-domain-model

hide empty members
package Repository{
    interface Repository<Id, Entity>
}

package "Users management" as UsersManagement {
    interface UsersService <<Service>>
}

package Permissions {
    interface PermissionsService <<Service>>
}

package "Devices management" {

    interface Device <<Aggregate Root>> {
        id: DeviceId
        name: String
        address: URL
        ~ executeAction(DeviceActionId, input: Any): (InvalidInputError | DeviceActionError | DeviceActionNotFound)?
    }

    enum DeviceStatus {
        Online
        Offline
    }

    interface DeviceGroup <<Aggregate Root>> {
        id: DeviceGroupId
        name: String
        ~addDeviceToGroup(DeviceId)
        ~removeDeviceFromGroup(DeviceId)
    }

    enum Type<T> {
        IntType<Int>
        DoubleType<Double>
        BooleanType<Boolean>
        ColorType<Color>
        StringType<String>
        VoidType<Void>
    }

    interface TypeConstraints<T> {
        validate(value: T): InvalidValueError?
    }

    struct Enum {
        values: Set<String>
    }

    struct IntRange {
        min: Int
        max: Int
    }

    struct DoubleRange {
        min: Double
        max: Double
    }

    struct None<T>
    note bottom of None
        None represents a simple
        type without constraints
    end note


    interface DeviceProperty<T> {
        id: DevicePropertyId
        name: String
        value: T
    }

    interface DeviceAction<T> {
        id: DeviceActionId
        name: String
        description: String?
        ~ execute(input: T): (InvalidInputError | DeviceActionError)?
    }

    interface DeviceEvent {
        name: String
    }

    ~interface DeviceRepository<DeviceId, Device> <<Repository>> {
    }
    ~interface DeviceGroupRepository<DeviceGroupId, DeviceGroup> <<Repository>> {
    }

    interface DeviceEventsSubscriber {
        deviceEventPublished(DeviceId, DeviceEvent)
    }

    interface DeviceStatusChangesSubscriber {
        deviceStatusChanged(DeviceId, DeviceStatus)
    }

    interface DeviceGroupsService <<Service>> {
        addGroup(Token, name: String): DeviceGroupId | DeviceGroupNameAlreadyInUseError | TokenError
        removeGroup(Token, DeviceGroupId): (DeviceGroupNotFoundError | TokenError)?
        renameGroup(Token, DeviceGroupId, String): (DeviceGroupNotFoundError | DeviceGroupNameAlreadyInUseError | TokenError)?
        findGroup(Token, DeviceGroupId): DeviceGroup | DeviceGroupNotFoundError | InvalidTokenError
        getAllDeviceGroups(Token): Iterable<DeviceGroup> | InvalidTokenError
        addDeviceToGroup(Token, DeviceId, DeviceGroupId): (DeviceNotFoundError | DeviceGroupNotFoundError | TokenError)?
        removeDeviceFromGroup(Token, DeviceId, DeviceGroupId): (DeviceNotFoundError | DeviceGroupNotFoundError | TokenError)?
    }

    interface DeviceEventsService <<Service>> {
        publishEvent(DeviceId, eventName: String): (DeviceNotFoundError | NotDeviceEventError)?
        subscribeForDeviceEvents(DeviceEventsSubscriber)
        unsubscribeForDeviceEvents(DeviceEventsSubscriber)
    }
    interface DeviceStatusesService <<Service>> {
        subscribeForDeviceStatusChanges(DeviceStatusChangesSubscriber)
        unsubscribeForDeviceStatusChanges(DeviceStatusChangesSubscriber)
    }

    interface DevicesService <<Service>> {
        add(Token, deviceUrl: URL): DeviceId | DeviceUnreachableError | TokenError
        remove(Token, DeviceId): (DeviceNotFoundError | TokenError)?
        rename(Token, DeviceId, String): (DeviceNotFoundError | TokenError)?
        find(Token, DeviceId): Device | DeviceNotFoundError | InvalidTokenError
        getAllDevices(Token): Iterable<Device> | InvalidTokenError
        executeAction(Token, DeviceId, DeviceActionId, input: Any): (InvalidInputError | DeviceActionError | DeviceActionNotFound | DeviceNotFound | InvalidTokenError | PermissionError)?
        executeAutomationAction(DeviceId, DeviceActionId, input: Any): (InvalidInputError | DeviceActionError | DeviceActionNotFound | DeviceNotFound)?
        updateDeviceProperty(DeviceId, DevicePropertyId, value: Any): (InvalidInputError | DeviceNotFound | DevicePropertyNotFound)?
    }

    ~interface DeviceFactory <<Factory>> {
        new(deviceUrl: URL): Device | DeviceUnreachableError
    }


    Device -l- DeviceStatus : "status >"
    Device "0..*   "  <--r--o "   0..*" DeviceGroup
    TypeConstraints "0..*" -- "1" Type : "type >"
    Enum -u-|> TypeConstraints : "<String>"
    IntRange -u-|> TypeConstraints : "<Int>"
    DoubleRange -u-|> TypeConstraints : "<Double>"
    None -u-|> TypeConstraints
    DeviceAction "0..*" -- "1" TypeConstraints : "inputTypeConstraint >"
    Device "1" *-- "0..*" DeviceProperty
    Device "1" *-- "0..*" DeviceAction
    <> Diamond
    DeviceProperty -r- Diamond : "or"
    Diamond "0..1" -r- "1" DeviceAction : "setter >"
    note on link
        DeviceProperty.Device == DeviceAction.Device
    end note
    Diamond "0..*" -- "1" TypeConstraints
    Device [name: String] -- "0..*" DeviceEvent
    DeviceGroupRepository -u-|> Repository.Repository
    DeviceGroupRepository o-- DeviceGroup
    DeviceRepository -u-|> Repository.Repository
    DeviceRepository o-- Device
    DevicesService --> DeviceRepository
    DeviceGroupsService --> DeviceGroupRepository
    DevicesService --> DeviceFactory
    DeviceEventsService "1" --> "0..*" DeviceEventsSubscriber
    DeviceStatusesService "1" --> "0..*" DeviceStatusChangesSubscriber
    DevicesService -u-> UsersManagement.UsersService
    DevicesService -u-> Permissions.PermissionsService
}

@enduml
