@startuml notifications-domain-model

hide empty members
package Repository{
    interface Repository<Id, Entity>
}

package "Users management" as UsersManagement {
    interface UsersService <<Service>>
}

package "Devices management" as DevicesManagement {
    interface DevicesService <<Service>>
    interface DeviceStatusesService <<Service>>
    interface DeviceStatusChangesSubscriber
}

package "Notifications" {
    interface NotificationsService <<Service>> {
        subscribeForDeviceOfflineNotifications(Token, DeviceId): (DeviceNotFoundError | InvalidTokenError | UserNotFoundError)?
        unsubscribeForDeviceOfflineNotifications(Token, DeviceId): (DeviceNotFoundError | InvalidTokenError | UserNotFoundError)?
        sendNotification(Email, message: String): UserNotFoundError?
        setupNotificationProtocol(NotificationProtocol): Void
    }

    interface NotificationProtocol {
        sendNotification(Email, message: String): Void
    }

    ~interface DeviceOfflineNotificationSubscriptionRepository<(Email, DeviceId), DeviceOfflineNotificationSubscription> <<Repository>> {
    }

    interface DeviceOfflineNotificationSubscription <<Aggregate>> {
        email: Email
        deviceId: DeviceId
    }

    NotificationsService --> DeviceOfflineNotificationSubscriptionRepository
    NotificationsService -r-|> DevicesManagement.DeviceStatusChangesSubscriber
    NotificationsService -r-> DevicesManagement.DevicesService
    NotificationsService -r-> DevicesManagement.DeviceStatusesService
    NotificationsService --> UsersManagement.UsersService
    NotificationsService --> NotificationProtocol
    DeviceOfflineNotificationSubscriptionRepository --|> Repository.Repository
    DeviceOfflineNotificationSubscriptionRepository o-- DeviceOfflineNotificationSubscription
}

@enduml
